"""Create all tables

Revision ID: de48d63862b3
Revises: 
Create Date: 2025-02-03 18:07:36.962228

"""
from typing import Sequence, Union

import sqlmodel
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'de48d63862b3'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('currencies',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('code', sa.VARCHAR(), nullable=False),
    sa.Column('symbol', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('uid'),
    sa.UniqueConstraint('code')
    )
    op.create_table('users',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('first_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('last_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('role', sa.VARCHAR(), server_default='user', nullable=False),
    sa.Column('pin', sa.VARCHAR(), nullable=True),
    sa.Column('password_hash', sa.VARCHAR(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('update_at', postgresql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_table('countries',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('name', sa.VARCHAR(), nullable=False),
    sa.Column('code', sa.VARCHAR(length=4), nullable=False),
    sa.Column('flag', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('currency_code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['currency_code'], ['currencies.code'], ),
    sa.PrimaryKeyConstraint('uid'),
    sa.UniqueConstraint('code'),
    sa.UniqueConstraint('name')
    )
    op.create_table('exchange_rates',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('base_currency', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('target_currency', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('rate', sa.Float(), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['base_currency'], ['currencies.code'], ),
    sa.ForeignKeyConstraint(['target_currency'], ['currencies.code'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_table('fees',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('base_country', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('target_country', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('fees', sa.Float(), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['base_country'], ['countries.name'], ),
    sa.ForeignKeyConstraint(['target_country'], ['countries.name'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_table('r_payments',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('r_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('country_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['country_name'], ['countries.name'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_table('s_payments',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('s_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('sender_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('sender_phone', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('country_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['country_name'], ['countries.name'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_table('transactions',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('amount_converted', sa.Float(), nullable=False),
    sa.Column('final_amount', sa.Float(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('base_country', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('target_country', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('s_pay', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('receiver_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('receiver_number', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('r_pay', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sa.VARCHAR(), nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['base_country'], ['countries.name'], ),
    sa.ForeignKeyConstraint(['target_country'], ['countries.name'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('transactions')
    op.drop_table('s_payments')
    op.drop_table('r_payments')
    op.drop_table('fees')
    op.drop_table('exchange_rates')
    op.drop_table('countries')
    op.drop_table('users')
    op.drop_table('currencies')
    # ### end Alembic commands ###
